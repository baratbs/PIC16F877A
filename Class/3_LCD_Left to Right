// PIC16F877A Configuration Bit Settings

// 'C' source line config statements

// CONFIG
#pragma config FOSC = EXTRC     // Oscillator Selection bits (RC oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable bit (BOR disabled)
#pragma config LVP = OFF        // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#define _XTAL_FREQ 6000000 //Usage of macro
void init();                                 //function Prototype Declaration
void lcd_command(unsigned char);                //function Prototype Declaration
void lcd_date(unsigned char);                //function prototype Declaration
unsigned char x,m,b,i;                       //Global variables Declaration
unsigned char arr[6]={"BARATH"};       //Global Array Declaration and Assign values.
void main()                                  // main function.
{
init();                                      //called function --without Argument
lcd_command(0xCf);                           //called function --with Argument
char address=0xcf;
for(x=0;x<6;x++)                            // for loop statement to Print the elements in the arr.
{
lcd_date(arr[x]);                            //called function with arguments X- values Decides by the loop.
address=arr[x];
address=address-0x01;
}
while(1);                                   // This is while one loop.
}
void init()
{
TRISC=0x00;			//set TRISC all bits as O/p.
TRISD=0x00;			//set TRISC all bits as o/p.
lcd_command(0x38);
__delay_ms(100);
lcd_command(0x38);
__delay_ms(100);
lcd_command(0x38);
__delay_ms(100);
lcd_command(0x38);
__delay_ms(100);
/*lcd_command(0x02);
__delay_ms(100);*/
lcd_command(0x0c);
__delay_ms(100);
lcd_command(0x01);
__delay_ms(100);
}

void lcd_date(unsigned char i)
{
PORTC|=0x08;
PORTD=i;
PORTC|=0x01;
PORTC&=~0x01;
__delay_ms(100);
}

void lcd_command(unsigned char i)
{
PORTC&=~0X08;
PORTD=i;
PORTC|=0x01;
PORTC&=!0x01;
__delay_ms(100);
}
