// PIC16F877A Configuration Bit Settings

// 'C' source line config statements

// CONFIG
#pragma config FOSC = EXTRC     // Oscillator Selection bits (RC oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable bit (BOR disabled)
#pragma config LVP = OFF        // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>     //Header file Declaration
#define _XTAL_FREQ 6000000  //Macro

void init(void);
void lcd_output(unsigned int);
void lcd_data(unsigned char);
void lcd_comment(unsigned char);
unsigned int givennumber1,givennumber2,sum;
unsigned char equal,plus;
void main()
{
init();
givennumber1=546;
givennumber2=123;
equal='=';
plus='+';
lcd_comment(0x80);
lcd_output(givennumber1);
lcd_data(plus);
lcd_comment(0x84);
lcd_output(givennumber2);
lcd_comment(0x87);
lcd_data(equal);
lcd_comment(0x88);
sum=givennumber1+givennumber2;
lcd_output(sum);
while(1);
}

void init(void)
{
TRISC=0X00;
TRISD=0X00;
__delay_ms(100);
lcd_comment(0x30);
 __delay_ms(100);
lcd_comment(0x30);
__delay_ms(100);
lcd_comment(0x30);
lcd_comment(0x38);
lcd_comment (0x08);
lcd_comment(0x0C);
lcd_comment(0x01);
lcd_comment(0x06);
}


void lcd_output(unsigned int givennumber)
{
unsigned int temp_givennumber,len_of_number=1;
unsigned int lcd_number;
temp_givennumber=givennumber;
while(temp_givennumber>10)
{
len_of_number=len_of_number*10;
temp_givennumber=temp_givennumber/10;
}
temp_givennumber=givennumber;
while(temp_givennumber>0)
{
lcd_number=temp_givennumber/len_of_number;
lcd_number=lcd_number+0x30;
lcd_data(lcd_number);
temp_givennumber=temp_givennumber%len_of_number;
		
len_of_number=len_of_number/10;
}
}

void lcd_comment(unsigned char i)
{
PORTC&=~0x08;
PORTD=i;
PORTC|=0x01;
PORTC&=~0x01;
__delay_ms(100);
}

void lcd_data(unsigned char i)
{
PORTC|=0x08;
PORTD=i;
PORTC|=0x01;
PORTC&=~0x01;
__delay_ms(100);
}
